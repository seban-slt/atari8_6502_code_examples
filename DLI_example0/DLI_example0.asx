; ----------------------------------------------------------------------------------------------------------------------------------------------------------------
;
; the simplest DLI routine example ever :P
;
; done by Seban/Slight @ 2016.01.30
;
; Public Domain
;

		opt	h+				; Atari file headers on (dos binary format)
		
		org	$a000				; program/code will be located at this address
		
; display list		
		
dl		dta	$70,$70,$70			; 3*7 of empty lines
		dta	$80				; one emty line + DLI flag
		dta	$47,a(text)			; ANTIC text mode $07 with load of address
		dta	$80				; one emty line + DLI flag
		dta	$07				; ANTIC text mode $07
		dta	$80				; one emty line + DLI flag
		dta	$07				; ANTIC text mode $07
		dta	$80				; one emty line + DLI flag
		dta	$07				; ANTIC text mode $07
		dta	$80				; one emty line + DLI flag
		dta	$07				; ANTIC text mode $07
		dta	$41,a(dl)			; JVB jump to begining of DL
		
text		dta	d'   VECTORCON LABS   '
		dta	d'IS PROUD TO PRESENT:'
		dta	d'THE MOST AVANCED ;-)'
		dta	d'    DISPLAY LIST    '
		dta	d'   - INTERRUPTS -   '


; code starts here

st		ldx	<DL				; set the DL address
		ldy	>DL
		stx	$230
		sty	$231
		
		lda	#$08				; set the default color (with DLI turned off)
		sta	$2c4
	
		ldx	<dli0
		ldy	>dli0				; set the DLI vector to the first DLI routine
		stx	$200
		sty	$201
		
; here we have turn off the DLI when shift key is pressed		

loop		lda	$14				; wait for VBL
		cmp	$14
		beq	*-2

		ldx	#$c0				; VBL + DLI
		
		lda	$d20f				; read the keys status
		and	#$08				; keep only the SHIFT key status
		bne	no_shift
		
		ldx	#$40				; only VBL

no_shift	stx	$d40e				; set the NMI status

		jmp	loop


; ----------------------------------------------------------------------------------------------------------------------------------------------------------------


dli0		pha					; store the A reg. on stack

		lda	#$88				; set the colour in the hardware register
		sta	$d016
		
		lda	<dli1				; set the DLI vector to the next DLI routine
		sta	$200
		lda	>dli1
		sta	$201

		pla					; restore A reg. from stack
		rti
		
dli1		pha					; store the A reg. on stack

		lda	#$38				; set the colour in the hardware register
		sta	$d016
		
		lda	<dli2				; set the DLI vector to the next DLI routine
		sta	$200
		lda	>dli2
		sta	$201

		pla					; restore A reg. from stack
		rti

dli2		pha					; store the A reg. on stack

		lda	#$A8				; set the colour in the hardware register
		sta	$d016
		
		lda	<dli3				; set the DLI vector to the next DLI routine
		sta	$200
		lda	>dli3
		sta	$201

		pla					; restore A reg. from stack
		rti

dli3		pha					; store the A reg. on stack

		lda	#$58				; set the colour in the hardware register
		sta	$d016
		
		lda	<dli4				; set the DLI vector to the next DLI routine
		sta	$200
		lda	>dli4
		sta	$201

		pla					; restore A reg. from stack
		rti

dli4		pha					; store the A reg. on stack

		txa
		pha					; because we will use the X reg in this DLI we also must preserve value of this reg.
		

; and here we do a some simple raster-bar, using the loop-counter as a luminance value, 
; and the $d40a (wsync) as a wait-for next line delay


		ldx	#$00				; X will be loop counter, and the value written to the color register
d4l		stx	$d40a				; wait for h-sync
		stx	$d016				; write X to the color register
		inx					; increment loop counter
		cpx	#$10				; end of loop? (compare X with $10)
		bcc	d4l				; jump when carry clear (reg. X < $10)

		lda	<dli0				; set the DLI vector to the first DLI routine
		sta	$200
		lda	>dli0
		sta	$201

		pla					; restore X reg. from stack
		tax
		pla					; restore A reg. from stack
		rti

; ----------------------------------------------------------------------------------------------------------------------------------------------------------------

		run	st		; set program RUN vector
		
		end			; end of code
